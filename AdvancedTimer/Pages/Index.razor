@page "/"
@using AdvancedTimer.Models

<PageTitle>Advanced Timer</PageTitle>

<div class="col-lg-8 align-content-lg-center">
    
    <div class="row mb-3 mx-auto">
        <div class="btn-group px-0">
            <WButton CssClasses="btn-success"
                     Text="Start"
                     WorkingText="Starting Timer"
                     OnClick="() => StartTimer(CurrentTimer)">
            </WButton>
            <WButton CssClasses="btn-danger"
                     Text="Start"
                     WorkingText="Starting Timer"
                     OnClick="() => StopTimer()">
            </WButton>
        </div>
    </div>
    
    <div class="input-group mb-3">
        <input @bind="TimerValue" type="number" class="form-control" placeholder="Timer length in seconds" aria-label="Timer length in seconds" aria-describedby="button-addon2">
        <WButton CssClasses="btn btn-primary"
                 Text="Add"
                 WorkingText="Adding Timer"
                 OnClick="() => AddingTimer(TimerValue)">
        </WButton>
    </div>
    
    <ul class="list-group mb-3">
        @if (Timers.Any())
        {
            foreach (var timer in Timers)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center @(CurrentTimer == timer ? "bg-primary" : "")">
                    Timer @(timer.Id + 1)
                    <span class="badge rounded-pill bg-secondary">@timer.Seconds second(s)</span>
                    <WButton CssClasses="btn btn-danger"
                             Text="Remove"
                             WorkingText="Removing Timer"
                             OnClick="() => DeleteTimer(timer)">
                    </WButton>
                </li>
            }
        }
        else
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                Add a timer below
            </li>
        }
    </ul>

    <div class="progress mb-3">
        <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" style="width: @ProgressBar%;"></div>
    </div>
    
    <div class="row mb-3 mx-auto">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" @bind="Loop">
            <label class="form-check-label" for="flexSwitchCheckDefault">Loop timer</label>
        </div>
    
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" @bind="SaveAndSound">
            <label class="form-check-label" for="flexSwitchCheckDefault">Make a Sound on Finish</label>
        </div>
    </div>


</div>

@code
{
    private PeriodicTimer PeriodicTimer;
    private double ProgressBar;

    private TimerModel CurrentTimer { get; set; }
    private CancellationTokenSource cancellationTokenSource;

    private bool Loop;
    private bool SaveAndSound;
    
    private int Id;
    private int TimerValue;
    private readonly List<TimerModel> Timers = new();

    private async Task AddingTimer(int timer)
    {
        if (timer == 0)
        {
            return;
        }
        
        Timers.Add(new TimerModel()
        {
            Id = Id,
            Seconds = timer
        });
        
        if (Id == 0)
        {
            CurrentTimer = Timers.First();
        }
        Id++;
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteTimer(TimerModel timer)
    {
        if (CurrentTimer == timer)
        {
            await StopTimer();
        }
        Timers.Remove(timer);
        await InvokeAsync(StateHasChanged);
    }

    private async Task StartTimer(TimerModel timerModel)
    {
        cancellationTokenSource = new CancellationTokenSource();

        do
        {
            foreach (var timer in Timers.Skip(Timers.IndexOf(timerModel)))
            {
                CurrentTimer = timer;
                var timerTime = timer.Seconds;
                PeriodicTimer = new(TimeSpan.FromMilliseconds(1000));

                while (await PeriodicTimer.WaitForNextTickAsync())
                {
                    if (timerTime <= 0)
                    {
                        Console.WriteLine("Finished timer " + timer.Id);
                        
                        break;
                    }

                    if (cancellationTokenSource.IsCancellationRequested)
                    {
                        Console.WriteLine("Stopped timer " + timer.Id);
                        return;
                    }

                    Console.WriteLine(timerTime + " Seconds is left");
                    timerTime--;

                    ProgressBar = Math.Round((double)timerTime / timer.Seconds * 100);
                    Console.WriteLine(ProgressBar + " Progressbar");
                    await InvokeAsync(StateHasChanged);
                }
            }
        } while (Loop);
        
        Console.WriteLine("Stopped Timers");
    }
    
    private Task StopTimer()
    {
        ProgressBar = 0;
        cancellationTokenSource?.Cancel();
        return Task.CompletedTask;
    }
    
}